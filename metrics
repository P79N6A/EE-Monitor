redis提供的api实际上提供的直接数据比较多，然而能用来反映平台集群运行情况的量大多都需要计算才能够直观体现
所以我在grafana里选择了一些量进行监控，其报警值只能在手动计算之后预估一个阈值写入报警系统

blocked_clients: 被阻塞的连接个数: 通常为0 建议在大于0的情况下告警

rejected_connections: redis连接个数达到maxclients限制，拒绝新连接的个数。(指的是连接客户端的数量) 大于0的情况下可告警

used_memory: redis真实使用内存，不包含内存碎片 (*used_memory_rss: 进程实际使用的物理内存大小，包含内存碎片)
需要咱们自己先决定到达 x% 之后告警 再算出 N 写入告警系统 N/maxmemory*100% = x% 

mem_fragmentation_ratio = used_memory_rss/used_memory used_memory 和 used_memory_rss 之间不应有太大差距 
正常情况下rss 应 略高于 used. 比值过大表明存在内存碎片，导致内存资源浪费，数值过高可设置告警 
如果 used > rss 小于1，表示redis已使用swap分区，建议告警

keyspace_hits: redis请求键被命中的次数
keyspace_misses: redis请求键未被命中的次数
需要先确定准确率 然后计算key miss来告警

expired_keys: 过期淘汰的key的个数量 观测值

evicted_keys: 网上说将来排查问题可能会用到 其实是一个观测值

total_commands_processed: 服务器处理过的总命令数 单个node总量过高可告警
instantaneous_ops_per_sec: redis当前的qps,redis内部较实时的每秒执行的命令数 与上一指标一起便于观测

instantaneous_input_kbps:  这两个都是观测值 但可用于观察数值排障
instantaneous_output_kbps: redis网络出/入口流量 单位:kb/s

rdb_changes_since_last_save:即有多少个写入命令没有持久化，最坏情况下会丢失的写入命令数。过高可设置告警

used_memory_dataset_perc: 实际数据集占used_memory的比率 这部分分母已经事先剪去了memory 自身的一部分memory 所以百分比不应该太小 太小告警

used_cpu_sys 整个集群整体cpu只用总和 观测值

